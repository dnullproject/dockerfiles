name: Docker Image CI

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      component:
        description: 'Component name (e.g., releaser, mongodump)'
        required: true
      version:
        description: 'Version number (e.g., 0.1.0)'
        required: true
  pull_request:
    branches: [ main ]
    paths:
      - '**/Dockerfile'

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Extract component and semantic version
      id: extract_info
      run: |
        if [[ "${{ github.event_name }}" == "release" ]]; then
          TAG=${GITHUB_REF#refs/tags/}
          COMPONENT=$(echo $TAG | cut -d'-' -f1)
          SEMANTIC=$(echo $TAG | cut -d'-' -f2-)
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          COMPONENT="${{ github.event.inputs.component }}"
          SEMANTIC="${{ github.event.inputs.version }}"
        elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
          COMPONENT=$(echo "${{ github.event.pull_request.title }}" | grep -oP '^\w+' || echo "test")
          SEMANTIC="pr-${{ github.event.pull_request.number }}"
        fi
        echo ::set-output name=COMPONENT::$COMPONENT
        echo ::set-output name=SEMANTIC::$SEMANTIC
        echo "WORKFLOW_NAME=$COMPONENT Docker Image CI" >> $GITHUB_ENV

    - name: Update workflow name
      run: echo "name: ${{ env.WORKFLOW_NAME }}" >> $GITHUB_WORKFLOW

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Check if Dockerfile exists
      id: dockerfile_check
      run: |
        if [ -f "${{ steps.extract_info.outputs.COMPONENT }}/Dockerfile" ]; then
          echo ::set-output name=EXISTS::true
        else
          echo ::set-output name=EXISTS::false
          echo "No Dockerfile found for component ${{ steps.extract_info.outputs.COMPONENT }}"
          exit 1
        fi

    - name: Build and push Docker image
      if: steps.dockerfile_check.outputs.EXISTS == 'true'
      uses: docker/build-push-action@v2
      with:
        context: ./${{ steps.extract_info.outputs.COMPONENT }}
        file: ./${{ steps.extract_info.outputs.COMPONENT }}/Dockerfile
        push: ${{ github.event_name == 'release' }}
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/${{ steps.extract_info.outputs.COMPONENT }}:${{ steps.extract_info.outputs.SEMANTIC }}
          ${{ secrets.DOCKER_USERNAME }}/${{ steps.extract_info.outputs.COMPONENT }}:latest
